
apiVersion: v1
kind: Namespace
metadata:
  name: filestore
--- 
apiVersion: v1
kind: Secret
metadata:
  name: default
  namespace: filestore
  annotations:
    kubernetes.io/service-account.name: default  
type: kubernetes.io/service-account-token

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: filestore
secrets:
- name: default
automountServiceAccountToken: false

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: filestoredata
  namespace: filestore
  labels:
    type: local
spec:
  storageClassName: standard
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  claimRef:
    namespace: filestore
    name: data-common
  hostPath:
    path: "/app"
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - node1
          - node2
          - node3
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name:  data-common
  namespace: filestore
  labels:
    app: storage-claim
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: redis
  namespace: filestore
  labels:
    app: redis
spec:
  containers:
  - name: redis
    image: redis:5.0.4
    command:
      - redis-server
      - "/app/redis-master/redis.conf"
    env:
    - name: MASTER
      value: "true"
    ports:
    - containerPort: 6379
    resources:
      limits:
        cpu: "0.1"
    volumeMounts:
    - mountPath: /app/redis-master-data
      name: data
    - mountPath: /app/redis-master
      name: config
  volumes:
    - name: data
      persistentVolumeClaim:
        claimName: 'data-common'
    - name: config
      configMap:
        name: filestore-redis-config
        items:
        - key: redis-config
          path: redis.conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filestore-redis-config
  namespace: filestore
data:
  redis-config: |
    maxmemory 200mb
    protected-mode yes
    Port 6379
    maxmemory-policy allkeys-lru    
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: filestore   
  labels:
    app: redis
spec:
  type: NodePort
  ports:
  - port: 6379
    targetPort: 30001
    protocol: TCP
    name: http
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: filestore-server
  namespace: filestore
spec:
  selector:
    matchLabels:
      app: filestore-server
  replicas: 1
  template:
    metadata:
      labels:
        app: filestore-server
    spec:
      containers:
      - name: filestore-server
        image: filestore:latest
        volumeMounts:
         - mountPath: /app/filestore
           name: common-volume
        env:
        - name: "REDIS_HOST"
          value: "redis"
        - name: "REDIS_PORT"
          value: "6379"
        ports:
        - containerPort: 5000
        imagePullPolicy: Always
      volumes:
      - name: common-volume
        persistentVolumeClaim:
         claimName: 'data-common'
---
apiVersion: v1
kind: Service
metadata:
  name: filestoreserver
  namespace: filestore   
  labels:
    app: filestoreserver  
spec:
  type: NodePort
  ports:
  - port: 5000
    targetPort: 30002
    protocol: TCP
    name: http
  selector:
    app: redis

